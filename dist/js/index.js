(()=>{"use strict";var __webpack_modules__={"./node_modules/confetti-js/dist/index.es.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction ConfettiGenerator(params) {\n  //////////////\n  // Defaults\n  var appstate = {\n    target: 'confetti-holder', // Id of the canvas\n    max: 80, // Max itens to render\n    size: 1, // prop size\n    animate: true, // Should animate?\n    respawn: true, // Should confettis be respawned when getting out of screen?\n    props: ['circle', 'square', 'triangle', 'line'], // Types of confetti\n    colors: [[165,104,246],[230,61,135],[0,199,228],[253,214,126]], // Colors to render confetti\n    clock: 25, // Speed of confetti fall\n    interval: null, // Draw interval holder\n    rotate: false, // Whenever to rotate a prop\n    start_from_edge: false, // Should confettis spawn at the top/bottom of the screen?\n    width: window.innerWidth, // canvas width (as int, in px)\n    height: window.innerHeight // canvas height (as int, in px)\n  };\n\n  //////////////\n  // Setting parameters if received\n  if(params) {\n    if(params.target)\n      appstate.target = params.target;\n    if(params.max)\n      appstate.max = params.max;\n    if(params.size)\n      appstate.size = params.size;\n    if(params.animate !== undefined && params.animate !== null)\n      appstate.animate = params.animate;\n    if(params.respawn !== undefined && params.respawn !== null)\n      appstate.respawn = params.respawn;\n    if(params.props)\n      appstate.props = params.props;\n    if(params.colors)\n      appstate.colors = params.colors;\n    if(params.clock)\n      appstate.clock = params.clock;\n    if(params.start_from_edge !== undefined && params.start_from_edge !== null)\n      appstate.start_from_edge = params.start_from_edge;\n    if(params.width)\n      appstate.width = params.width;\n    if(params.height)\n      appstate.height = params.height;\n    if(params.rotate !== undefined && params.rotate !== null)\n      appstate.rotate = params.rotate;\n  }\n\n  //////////////\n  // Early exit if the target is not the correct type, or is null\n  if(\n    typeof appstate.target != 'object' &&\n    typeof appstate.target != 'string'\n  ) {\n    throw new TypeError('The target parameter should be a node or string');\n  }\n\n  if(\n    (typeof appstate.target == 'object' && (appstate.target === null || !appstate.target instanceof HTMLCanvasElement)) ||\n    (typeof appstate.target == 'string' && (document.getElementById(appstate.target) === null || !document.getElementById(appstate.target) instanceof HTMLCanvasElement))\n  ) {\n    throw new ReferenceError('The target element does not exist or is not a canvas element');\n  }\n\n  //////////////\n  // Properties\n  var cv = typeof appstate.target == 'object'\n    ? appstate.target\n    : document.getElementById(appstate.target);\n  var ctx = cv.getContext(\"2d\");\n  var particles = [];\n\n  //////////////\n  // Random helper (to minimize typing)\n  function rand(limit, floor) {\n    if(!limit) limit = 1;\n    var rand = Math.random() * limit;\n    return !floor ? rand : Math.floor(rand);\n  }\n\n  var totalWeight = appstate.props.reduce(function(weight, prop) {\n    return weight + (prop.weight || 1);\n  }, 0);\n  function selectProp() {\n    var rand = Math.random() * totalWeight;\n    for (var i = 0; i < appstate.props.length; ++i) {\n      var weight = appstate.props[i].weight || 1;\n      if (rand < weight) return i;\n      rand -= weight;\n    }\n  }\n\n  //////////////\n  // Confetti particle generator\n  function particleFactory() {\n    var prop = appstate.props[selectProp()];\n    var p = {\n      prop: prop.type ? prop.type : prop, //prop type\n      x: rand(appstate.width), //x-coordinate\n      y: appstate.start_from_edge ? (appstate.clock >= 0 ? -10 : parseFloat(appstate.height) + 10) : rand(appstate.height), //y-coordinate\n      src: prop.src,\n      radius: rand(4) + 1, //radius\n      size: prop.size,\n      rotate: appstate.rotate,\n      line: Math.floor(rand(65) - 30), // line angle\n      angles: [rand(10, true) + 2, rand(10, true) + 2, rand(10, true) + 2, rand(10, true) + 2], // triangle drawing angles\n      color: appstate.colors[rand(appstate.colors.length, true)], // color\n      rotation: rand(360, true) * Math.PI/180,\n      speed: rand(appstate.clock / 7) + (appstate.clock / 30)\n    };\n\n    return p;\n  }\n\n  //////////////\n  // Confetti drawing on canvas\n  function particleDraw(p) {\n    if (!p) {\n      return;\n    }\n\n    var op = (p.radius <= 3) ? 0.4 : 0.8;\n\n    ctx.fillStyle = ctx.strokeStyle = \"rgba(\" + p.color + \", \"+ op +\")\";\n    ctx.beginPath();\n\n    switch(p.prop) {\n      case 'circle':{\n        ctx.moveTo(p.x, p.y);\n        ctx.arc(p.x, p.y, p.radius * appstate.size, 0, Math.PI * 2, true);\n        ctx.fill();\n        break;\n      }\n      case 'triangle': {\n        ctx.moveTo(p.x, p.y);\n        ctx.lineTo(p.x + (p.angles[0] * appstate.size), p.y + (p.angles[1] * appstate.size));\n        ctx.lineTo(p.x + (p.angles[2] * appstate.size), p.y + (p.angles[3] * appstate.size));\n        ctx.closePath();\n        ctx.fill();\n        break;\n      }\n      case 'line':{\n        ctx.moveTo(p.x, p.y);\n        ctx.lineTo(p.x + (p.line * appstate.size), p.y + (p.radius * 5));\n        ctx.lineWidth = 2 * appstate.size;\n        ctx.stroke();\n        break;\n      }\n      case 'square': {\n        ctx.save();\n        ctx.translate(p.x+15, p.y+5);\n        ctx.rotate(p.rotation);\n        ctx.fillRect(-15 * appstate.size,-5 * appstate.size,15 * appstate.size,5 * appstate.size);\n        ctx.restore();\n        break;\n      }\n      case 'svg': {\n        ctx.save();\n        var image = new window.Image();\n        image.src = p.src;\n        var size = p.size || 15;\n        ctx.translate(p.x + size / 2, p.y + size / 2);\n        if(p.rotate)\n          ctx.rotate(p.rotation);\n        ctx.drawImage(image, -(size/2) * appstate.size, -(size/2) * appstate.size, size * appstate.size, size * appstate.size);\n        ctx.restore();\n        break;\n      }\n    }\n  }\n\n  //////////////\n  // Public itens\n  //////////////\n\n  //////////////\n  // Clean actual state\n  var _clear = function() {\n    appstate.animate = false;\n    clearInterval(appstate.interval);\n\n    requestAnimationFrame(function() {\n    \tctx.clearRect(0, 0, cv.width, cv.height);\n      var w = cv.width;\n      cv.width = 1;\n      cv.width = w;\n    });\n  };\n\n  //////////////\n  // Render confetti on canvas\n  var _render = function() {\n      cv.width = appstate.width;\n      cv.height = appstate.height;\n      particles = [];\n\n      for(var i = 0; i < appstate.max; i ++)\n        particles.push(particleFactory());\n\n      function draw(){\n        ctx.clearRect(0, 0, appstate.width, appstate.height);\n\n        for(var i in particles)\n          particleDraw(particles[i]);\n\n        update();\n\n        if(appstate.animate) requestAnimationFrame(draw);\n      }\n\n      function update() {\n\n        for (var i = 0; i < appstate.max; i++) {\n          var p = particles[i];\n\n          if (p) {\n            if(appstate.animate)\n              p.y += p.speed;\n\n            if (p.rotate)\n              p.rotation += p.speed / 35;\n\n            if ((p.speed >= 0 && p.y > appstate.height) || (p.speed < 0 && p.y < 0)) {\n              if(appstate.respawn) {\n                particles[i] = p;\n                particles[i].x = rand(appstate.width, true);\n                particles[i].y = p.speed >= 0 ? -10 : parseFloat(appstate.height);\n              } else {\n                particles[i] = undefined;\n              }\n            }\n          }\n        }\n\n        if (particles.every(function(p) { return p === undefined; })) {\n          _clear();\n        }\n      }\n\n      return requestAnimationFrame(draw);\n  };\n\n  return {\n    render: _render,\n    clear: _clear\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ConfettiGenerator);\n\n\n//# sourceURL=webpack://typing_app/./node_modules/confetti-js/dist/index.es.js?")},"./src/js/classes/ModalWindow.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ ModalWindow)\n/* harmony export */ });\nclass ModalWindow {\r\n    constructor(callbackWhenHide, callbackWhenShow, selectorModalWindow = ".modal-window") {\r\n        this.modalWindow = document.querySelector(selectorModalWindow);\r\n        this.callbackWhenHide = callbackWhenHide;\r\n        this.callbackWhenShow = callbackWhenShow;\r\n    }\r\n\r\n    _setHide() {\r\n        this.modalWindow.addEventListener("click", (e) => {\r\n            const target = e.target;\r\n\r\n            if (target.classList.contains("modal-window") || target.classList.contains("modal-window__inner") || target.classList.contains("confetti-canvas")) {\r\n                if (this.callbackWhenHide instanceof Function) {\r\n                    this.callbackWhenHide();\r\n                }\r\n\r\n                this.modalWindow.classList.remove("show");\r\n            }\r\n        });\r\n    }\r\n\r\n    show() {\r\n        if (this.callbackWhenShow instanceof Function) {\r\n            this.callbackWhenShow();\r\n        }\r\n\r\n        this.modalWindow.classList.add("show");\r\n        \r\n        return this;\r\n    }\r\n\r\n    init() {\r\n        this._setHide();\r\n\r\n        return this;\r\n    }\r\n}\n\n//# sourceURL=webpack://typing_app/./src/js/classes/ModalWindow.js?')},"./src/js/classes/TypingLogic.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ TypingLogic)\n/* harmony export */ });\n/* harmony import */ var _helpers_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/keys */ "./src/js/helpers/keys.js");\n\r\n\r\nclass TypingLogic {\r\n    constructor() {\r\n        this.listText = document.querySelector(".typing-workspace__list-lines");\r\n        this.listKeys = document.querySelector(".keyboard__keys");\r\n        this.btnRepeat = document.querySelector(".typing-workspace__progress-repeat");\r\n        this.progressLine = document.querySelector(".typing-workspace__progress-line-inner");\r\n        this.countCompletedLinesEl = document.querySelector(".typing-workspace__progress-completed");\r\n        this.canvasConfetti = document.querySelector("#confetti");\r\n        this.end = true;\r\n        this.text = "";\r\n        this.textData = [];\r\n        this.ignoreKeys = ["Tab", "CapsLock", "ShiftLeft", "ShiftRight", "ControlLeft", "ControlRight", "MetaLeft", "MetaRight", "AltLeft", "AltRight", "ContextMenu"];\r\n    }\r\n\r\n    _renderCountCompletedLines() {\r\n        const countCompletedTexts = this.textData.filter(({ completed, }) => completed).length;\r\n\r\n        this.countCompletedLinesEl.textContent = `${countCompletedTexts}/${this.textData.length}`;\r\n    }\r\n\r\n    _renderKeys() {\r\n        _helpers_keys__WEBPACK_IMPORTED_MODULE_0__["default"].forEach((rowArr) => {\r\n            const rowKeys = document.createElement("div");\r\n            \r\n            rowKeys.classList.add("keyboard__row-keys");\r\n\r\n            rowArr.forEach(({ className, str, key, }) => {\r\n                const keyBlock = document.createElement("div");\r\n\r\n                keyBlock.classList.add("key", className || "key--empty");\r\n\r\n                keyBlock.textContent = str;\r\n                keyBlock.dataset.key = key;\r\n\r\n                rowKeys.appendChild(keyBlock);\r\n            });\r\n\r\n            this.listKeys.appendChild(rowKeys);\r\n        });\r\n    }\r\n\r\n    _renderText() {\r\n        this.listText.innerHTML = "";\r\n        \r\n        this.textData.forEach(({ sentence, }, idx) => {\r\n            const HTMLLineStr = `\r\n                <li class="typing-workspace__line" data-line-idx="${idx}">\r\n                    <p class="typing-workspace__line-text text-keys">\r\n                        <span class="key--completed"></span><span class="typing-workspace__line-text-not-completed">${sentence}</span>\r\n                    </p>\r\n                    <span class="typing-workspace__line-text-num">${idx + 1}</span>\r\n                </li>\r\n            `;\r\n\r\n            this.listText.innerHTML += HTMLLineStr;\r\n        });\r\n    }\r\n\r\n    fillTextData(text) {\r\n        this.textData = text\r\n            .split("\\n")\r\n            .reduce((acc, sentence, idx) => {\r\n                const letters = sentence\r\n                    .split("")\r\n                    .map((letter, idx) => ({ letter, active: idx === 0, completed: false, }));\r\n\r\n                acc.push({\r\n                    letters,\r\n                    sentence,\r\n                    active: idx === 0,\r\n                    completed: false,\r\n                });\r\n                \r\n                return acc;\r\n            }, []);\r\n\r\n        this.end = false;\r\n\r\n        this._renderText();\r\n        this._renderCountCompletedLines();\r\n    }\r\n\r\n    _setPressedKey(els, idx) {\r\n        els.forEach((el) => el.classList.remove("key--pressed"));\r\n\r\n        els[idx].classList.add("key--pressed");\r\n    }\r\n\r\n    _setProgress() {\r\n        const completedLetters = this.textData.reduce((count, { letters, }) => count += letters.filter(({ completed, }) => completed).length, 0);\r\n        const allLetters = this.textData.reduce((count, { letters }) => count += letters.length, 0);\r\n        const progress = (completedLetters / allLetters) * 100;\r\n\r\n        this.progressLine.style.width = `${progress}%`;\r\n    }\r\n\r\n    _setRepeat() {\r\n        this.btnRepeat.addEventListener("click", this.clearTextData.bind(this));\r\n    }\r\n\r\n    clearTextData() {\r\n        this.textData.forEach((sentence, idx) => {\r\n            sentence.active = idx === 0;\r\n            sentence.completed = false;\r\n            sentence.letters.forEach((letter) => {\r\n                letter.active = false;\r\n                letter.completed = false;\r\n            });\r\n        });\r\n\r\n        this.textData[0].letters[0].active = true;\r\n\r\n        this.end = false;\r\n\r\n        this.canvasConfetti.classList.remove("show-opacity");\r\n\r\n        this._setProgress();\r\n        this._renderCountCompletedLines();\r\n        this._renderText();\r\n    }\r\n\r\n    _checkTyping(pressedKey) {\r\n        const findActiveIdxSentence = this.textData.findIndex(({ active, }) => active);\r\n        const sentenceData = this.textData[findActiveIdxSentence];\r\n        const findActiveIdxKey = sentenceData.letters.findIndex(({ active, }) => active);\r\n        const findKey = sentenceData.letters[findActiveIdxKey].letter;\r\n\r\n        if (this.ignoreKeys.includes(pressedKey)) {\r\n            return;\r\n        }\r\n        \r\n        // TODO:\r\n        // * Конец попытки на текущем предложении\r\n        //   начинаем заново (только это предложение)\r\n        if (findKey !== pressedKey) {\r\n            return;\r\n        }\r\n\r\n        // Отключаем текущую активную букву\r\n        this.textData[findActiveIdxSentence].letters[findActiveIdxKey].completed = true;\r\n        this.textData[findActiveIdxSentence].letters[findActiveIdxKey].active = false;\r\n\r\n        if (findActiveIdxKey + 1 < this.textData[findActiveIdxSentence].letters.length) {\r\n            // Включаем следующую активную букву\r\n            this.textData[findActiveIdxSentence].letters[findActiveIdxKey + 1].active = true;\r\n        } else {\r\n            // Отключаем текущее активное предложение\r\n            this.textData[findActiveIdxSentence].active = false;\r\n            this.textData[findActiveIdxSentence].completed = true;\r\n\r\n            if (findActiveIdxSentence + 1 < Object.keys(this.textData).length) {\r\n                // Включаем следующее активное предложение и букву\r\n                this.textData[findActiveIdxSentence + 1].active = true;\r\n                this.textData[findActiveIdxSentence + 1].letters[0].active = true;\r\n            } else {\r\n                console.log("finish");\r\n                this.canvasConfetti.classList.add("show-opacity");\r\n    \r\n                this.end = true;\r\n            }\r\n        }\r\n\r\n        this._setProgress();\r\n        this._renderCountCompletedLines();\r\n        this._splitSentenceInHTML(findActiveIdxSentence, sentenceData);\r\n    }\r\n\r\n    _splitSentenceInHTML(idxLine, sentenceData) {\r\n        const elLine = document.querySelector(`.typing-workspace__line[data-line-idx="${idxLine}"]`);\r\n        const completedKeysEl = elLine.querySelector(".key--completed");\r\n        const notCompletedKeysEl = elLine.querySelector(".typing-workspace__line-text-not-completed");\r\n        const completedLetters = sentenceData.letters.filter(({ completed, }) => completed);\r\n        const notCompletedLetters = sentenceData.letters.filter(({ completed, }) => !completed);\r\n        const strCompletedLetters = completedLetters.reduce((str, { letter, }) => str += letter, "");\r\n        const strNotCompletedLetters = notCompletedLetters.reduce((str, { letter, }) => str += letter, "");\r\n\r\n        completedKeysEl.textContent = strCompletedLetters;\r\n        notCompletedKeysEl.textContent = strNotCompletedLetters;\r\n    }\r\n\r\n    addTyping() {\r\n        const keyEls = document.querySelectorAll(".key[data-key]");\r\n\r\n        window.addEventListener("keydown", (e) => this._typingHandler(e, keyEls));\r\n    }\r\n\r\n    removeTyping() {\r\n        const keyEls = document.querySelectorAll(".key[data-key]");\r\n\r\n        window.removeEventListener("keydown", (e) => this._typingHandler(e, keyEls));\r\n    }\r\n\r\n    _typingHandler(e, keyEls) {\r\n        e.preventDefault();\r\n\r\n        if (this.end) {\r\n            return;\r\n        }\r\n\r\n        const code = e.code;\r\n        const key = e.key;\r\n        const findMatchIdx = [...keyEls].findIndex((el) => el.dataset.key === code);\r\n\r\n        if (findMatchIdx === -1) {\r\n            return;\r\n        }\r\n\r\n        this._setPressedKey(keyEls, findMatchIdx);\r\n        this._checkTyping(key);\r\n    }\r\n\r\n    init() {\r\n        this._renderKeys();\r\n        this._setRepeat();\r\n\r\n        return this;\r\n    }\r\n}\n\n//# sourceURL=webpack://typing_app/./src/js/classes/TypingLogic.js?')},"./src/js/helpers/keys.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([\r\n    [\r\n        { key: "Backquote", str: "`", className: "finger1", },\r\n        { key: "Digit1", str: "1", className: "finger1", },\r\n        { key: "Digit2", str: "2", className: "finger2", },\r\n        { key: "Digit3", str: "3", className: "finger3", },\r\n        { key: "Digit4", str: "4", className: "finger4", },\r\n        { key: "Digit5", str: "5", className: "finger4", },\r\n        { key: "Digit6", str: "6", className: "finger4", },\r\n        { key: "Digit7", str: "7", className: "finger5", },\r\n        { key: "Digit8", str: "8", className: "finger3", },\r\n        { key: "Digit9", str: "9", className: "finger2", },\r\n        { key: "Digit0", str: "0", className: "finger1", },\r\n        { key: "Minus", str: "-", className: "finger1", },\r\n        { key: "Equal", str: "=", className: "finger1", },\r\n        { key: "Backspace", str: "Backsp", className: "", },\r\n    ],\r\n    [\r\n        { key: "Tab", str: "Tab", className: "", },\r\n        { key: "KeyQ", str: "q", className: "finger1", },\r\n        { key: "KeyW", str: "w", className: "finger2", },\r\n        { key: "KeyE", str: "e", className: "finger3", },\r\n        { key: "KeyR", str: "r", className: "finger4", },\r\n        { key: "KeyT", str: "t", className: "finger4", },\r\n        { key: "KeyY", str: "y", className: "finger5", },\r\n        { key: "KeyU", str: "u", className: "finger5", },\r\n        { key: "KeyI", str: "i", className: "finger3", },\r\n        { key: "KeyO", str: "o", className: "finger2", },\r\n        { key: "KeyP", str: "p", className: "finger1", },\r\n        { key: "BracketLeft", str: "[", className: "finger1", },\r\n        { key: "BracketRight", str: "]", className: "finger1", },\r\n        { key: "Backslash", str: "\\\\", className: "finger1", },\r\n    ],\r\n    [\r\n        { key: "CapsLock", str: "Caps Lock", className: "", },\r\n        { key: "KeyA", str: "a", className: "finger1", },\r\n        { key: "KeyS", str: "s", className: "finger2", },\r\n        { key: "KeyD", str: "d", className: "finger3", },\r\n        { key: "KeyF", str: "f", className: "finger4", },\r\n        { key: "KeyG", str: "g", className: "finger4", },\r\n        { key: "KeyH", str: "h", className: "finger5", },\r\n        { key: "KeyJ", str: "j", className: "finger5", },\r\n        { key: "KeyK", str: "k", className: "finger3", },\r\n        { key: "KeyL", str: "l", className: "finger2", },\r\n        { key: "Semicolon", str: ";", className: "finger1", },\r\n        { key: "Quote", str: "\'", className: "finger1", },\r\n        { key: "Enter", str: "Enter", className: "", },\r\n    ],\r\n    [\r\n        { key: "ShiftLeft", str: "Shift", className: "", },\r\n        { key: "KeyZ", str: "z", className: "finger1", },\r\n        { key: "KeyX", str: "x", className: "finger2", },\r\n        { key: "KeyC", str: "c", className: "finger3", },\r\n        { key: "KeyV", str: "v", className: "finger4", },\r\n        { key: "KeyB", str: "b", className: "finger4", },\r\n        { key: "KeyN", str: "n", className: "finger5", },\r\n        { key: "KeyM", str: "m", className: "finger5", },\r\n        { key: "Comma", str: ",", className: "finger3", },\r\n        { key: "Period", str: ".", className: "finger2", },\r\n        { key: "Slash", str: "/", className: "finger1", },\r\n        { key: "ShiftRight", str: "Shift", className: "", },\r\n    ],\r\n    [\r\n        { key: "ControlLeft", str: "Ctrl", className: "", },\r\n        { key: "MetaLeft", str: "Win", className: "", },\r\n        { key: "AltLeft", str: "Alt", className: "", },\r\n        { key: "Space", str: "", className: "finger6", },\r\n        { key: "AltRight", str: "Alt", className: "", },\r\n        { key: "MetaRight", str: "Win", className: "", },\r\n        { key: "ContextMenu", str: "Ctx Menu", className: "", },\r\n        { key: "ControlRight", str: "Ctrl", className: "", },\r\n    ],\r\n]);\n\n//# sourceURL=webpack://typing_app/./src/js/helpers/keys.js?')},"./src/js/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_addText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/addText */ "./src/js/scripts/addText.js");\n/* harmony import */ var _scripts_setConfitti__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/setConfitti */ "./src/js/scripts/setConfitti.js");\n\r\n\r\n\r\nwindow.addEventListener("load", () => {\r\n    (0,_scripts_addText__WEBPACK_IMPORTED_MODULE_0__["default"])();\r\n    (0,_scripts_setConfitti__WEBPACK_IMPORTED_MODULE_1__["default"])();\r\n});\n\n//# sourceURL=webpack://typing_app/./src/js/index.js?')},"./src/js/scripts/addText.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _classes_TypingLogic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/TypingLogic */ "./src/js/classes/TypingLogic.js");\n/* harmony import */ var _classes_ModalWindow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/ModalWindow */ "./src/js/classes/ModalWindow.js");\n\r\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => {\r\n    const form = document.querySelector("#add-text-form");\r\n    const typingLogic = new _classes_TypingLogic__WEBPACK_IMPORTED_MODULE_0__["default"]().init();\r\n    const callbackWhenHide = () => {\r\n        typingLogic.clearTextData();\r\n        typingLogic.removeTyping();\r\n    };\r\n    const callbackWhenShow = () => typingLogic.addTyping();\r\n    const modalWindow = new _classes_ModalWindow__WEBPACK_IMPORTED_MODULE_1__["default"](callbackWhenHide, callbackWhenShow).init();\r\n\r\n    form.addEventListener("submit", (e) => {\r\n        e.preventDefault();\r\n        \r\n        const fd = new FormData(form);\r\n        const value = fd.get("text");\r\n\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        modalWindow.show();\r\n        typingLogic.fillTextData(value);\r\n    });\r\n});\n\n//# sourceURL=webpack://typing_app/./src/js/scripts/addText.js?')},"./src/js/scripts/setConfitti.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var confetti_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! confetti-js */ "./node_modules/confetti-js/dist/index.es.js");\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => {\r\n    new confetti_js__WEBPACK_IMPORTED_MODULE_0__["default"]({ target: "confetti", size: 2, max: 250, }).render();\r\n});\n\n//# sourceURL=webpack://typing_app/./src/js/scripts/setConfitti.js?')}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];return void 0!==t||(t=__webpack_module_cache__[e]={exports:{}},__webpack_modules__[e](t,t.exports,__webpack_require__)),t.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/js/index.js")})();